<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.warmheart.workerunion.server.dao.ContractMapper">
	<resultMap id="BaseResultMap" type="top.warmheart.workerunion.server.model.Contract">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="company_id" jdbcType="BIGINT" property="companyId" />
		<result column="project_id" jdbcType="BIGINT" property="projectId" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="num" jdbcType="VARCHAR" property="num" />
		<result column="type" jdbcType="VARCHAR" property="type" />
		<result column="part_a" jdbcType="VARCHAR" property="partA" />
		<result column="part_b" jdbcType="VARCHAR" property="partB" />
		<result column="sign_date" jdbcType="DATE" property="signDate" />
		<result column="money" jdbcType="DECIMAL" property="money" />
		<result column="duty_department" jdbcType="VARCHAR" property="dutyDepartment" />
		<result column="content_abstract" jdbcType="VARCHAR" property="contentAbstract" />
		<result column="cst_create" jdbcType="TIMESTAMP" property="cstCreate" />
		<result column="cst_modified" jdbcType="TIMESTAMP" property="cstModified" />
		<result column="is_del" jdbcType="BIT" property="del" />
	</resultMap>
	<resultMap id="ContractDtoMap" type="top.warmheart.workerunion.server.dto.ContractDto">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="company_id" jdbcType="BIGINT" property="companyId" />
		<result column="project_id" jdbcType="BIGINT" property="projectId" />
		<result column="project_name" jdbcType="VARCHAR" property="projectName" />
		<result column="project_num" jdbcType="VARCHAR" property="projectNum" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="num" jdbcType="VARCHAR" property="num" />
		<result column="type" jdbcType="VARCHAR" property="type" />
		<result column="part_a" jdbcType="VARCHAR" property="partA" />
		<result column="part_b" jdbcType="VARCHAR" property="partB" />
		<result column="sign_date" jdbcType="DATE" property="signDate" />
		<result column="money" jdbcType="DECIMAL" property="money" />
		<result column="duty_department" jdbcType="VARCHAR" property="dutyDepartment" />
		<result column="content_abstract" jdbcType="VARCHAR" property="contentAbstract" />
		<result column="cst_create" jdbcType="TIMESTAMP" property="cstCreate" />
		<result column="cst_modified" jdbcType="TIMESTAMP" property="cstModified" />
		<result column="is_del" jdbcType="BIT" property="del" />
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.math.BigInteger">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		delete from contract
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="top.warmheart.workerunion.server.model.Contract">
		<selectKey keyProperty="id" order="AFTER" resultType="java.math.BigInteger">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into contract (company_id, project_id, name,
		num, type, part_a, part_b,
		sign_date, money, duty_department,
		content_abstract, cst_create, cst_modified,
		is_del)
		values (#{companyId,jdbcType=BIGINT}, #{projectId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR},
		#{num,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, #{partA,jdbcType=VARCHAR}, #{partB,jdbcType=VARCHAR},
		#{signDate,jdbcType=DATE}, #{money,jdbcType=DECIMAL}, #{dutyDepartment,jdbcType=VARCHAR},
		#{contentAbstract,jdbcType=VARCHAR}, now(), now(),
		false)
	</insert>
	<update id="updateByPrimaryKey" parameterType="top.warmheart.workerunion.server.model.Contract">
		update contract
		set company_id = #{companyId,jdbcType=BIGINT},
		project_id = #{projectId,jdbcType=BIGINT},
		name = #{name,jdbcType=VARCHAR},
		num = #{num,jdbcType=VARCHAR},
		type = #{type,jdbcType=VARCHAR},
		part_a = #{partA,jdbcType=VARCHAR},
		part_b = #{partB,jdbcType=VARCHAR},
		sign_date = #{signDate,jdbcType=DATE},
		money = #{money,jdbcType=DECIMAL},
		duty_department = #{dutyDepartment,jdbcType=VARCHAR},
		content_abstract = #{contentAbstract,jdbcType=VARCHAR},
		cst_modified = now()
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="deleteById" parameterType="java.math.BigInteger">
		update contract
		set is_del=true,
		cst_modified = now()
		where id = #{id,jdbcType=BIGINT} and is_del=false
	</update>
	<select id="selectByPrimaryKey" parameterType="java.math.BigInteger" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		select id, company_id, project_id, name, num, type, part_a, part_b, sign_date, money,
		duty_department, content_abstract, cst_create, cst_modified, is_del
		from contract
		where id = #{id,jdbcType=BIGINT}
	</select>
	<select id="selectByCompanyAndNum" resultMap="BaseResultMap">
		select id, company_id, project_id, name, num, type, part_a, part_b, sign_date, money,
		duty_department, content_abstract, cst_create, cst_modified, is_del
		from contract
		where company_id=#{companyId,jdbcType=BIGINT} and num=#{num,jdbcType=VARCHAR}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		select id, company_id, project_id, name, num, type, part_a, part_b, sign_date, money,
		duty_department, content_abstract, cst_create, cst_modified, is_del
		from contract
	</select>
	<select id="selectListSimpleItemByProjectId" resultMap="BaseResultMap">
		select id, company_id, project_id, name, num, type, part_a, part_b, sign_date, money,
		duty_department, content_abstract, cst_create, cst_modified, is_del
		from contract where project_id = #{projectId,jdbcType=BIGINT} and is_del=false
	</select>
	<select id="selectDetailById" parameterType="java.math.BigInteger" resultMap="ContractDtoMap">
		select c.id, c.company_id, c.project_id, c.name, c.num, c.type, c.part_a, c.part_b, c.sign_date, c.money,
		c.duty_department, c.content_abstract, c.cst_create, c.cst_modified, c.is_del, p.name as project_name, p.num as project_num
		from contract c join project p on p.id=c.project_id
		where c.id = #{id,jdbcType=BIGINT} 
	</select>
	
	<!-- 获取符合模糊搜索的合同信息个数 -->
	<select id="countByFuzzy" resultType="java.lang.Integer">
		select count(distinct c.id) from contract c join project p on c.project_id=p.id 
		where c.company_id=#{contractDto.companyId} and c.is_del=false
		<if test="contractDto.num != null and contractDto.num != ''">
			and c.num like CONCAT('%',#{contractDto.num},'%')
		</if>
		<if test="contractDto.name != null and contractDto.name != ''">
			and c.name like CONCAT('%',#{contractDto.name},'%')
		</if>
		<if test="contractDto.type != null and contractDto.type != ''">
			and c.type like CONCAT('%',#{contractDto.type},'%')
		</if>
		<if test="contractDto.projectNum != null and contractDto.projectNum != ''">
			and p.num like CONCAT('%',#{contractDto.projectNum},'%')
		</if>
		<if test="contractDto.projectName != null and contractDto.projectName != ''">
			and p.name like CONCAT('%',#{contractDto.projectName},'%')
		</if>
	</select>

	<!-- 获取符合模糊搜索的合同信息列表 -->
	<select id="pageByFuzzy" resultMap="ContractDtoMap">
	select c.id, c.company_id, c.project_id, c.name, c.num, c.type, c.part_a, c.part_b, c.sign_date, c.money,
		c.duty_department, c.content_abstract, c.cst_create, c.cst_modified, c.is_del, p.name as project_name, p.num as project_num
		from contract c join project p on p.id=c.project_id, (select distinct c2.id from contract c2 join project p2 on c2.project_id=p2.id 
		where c2.company_id=#{contractDto.companyId} and c2.is_del=false
		<if test="contractDto.num != null and contractDto.num != ''">
			and c2.num like CONCAT('%',#{contractDto.num},'%')
		</if>
		<if test="contractDto.name != null and contractDto.name != ''">
			and c2.name like CONCAT('%',#{contractDto.name},'%')
		</if>
		<if test="contractDto.type != null and contractDto.type != ''">
			and c2.type like CONCAT('%',#{contractDto.type},'%')
		</if>
		<if test="contractDto.projectNum != null and contractDto.projectNum != ''">
			and p2.num like CONCAT('%',#{contractDto.projectNum},'%')
		</if>
		<if test="contractDto.projectName != null and contractDto.projectName != ''">
			and p2.name like CONCAT('%',#{contractDto.projectName},'%')
		</if> order by c2.num asc limit #{page.frontIndex},#{page.size})temp where c.id=temp.id order by c.num asc
	
	</select>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.warmheart.workerunion.server.dao.MaterialHeadquartersMapper">
	<resultMap id="BaseResultMap" type="top.warmheart.workerunion.server.model.MaterialHeadquarters">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="company_id" jdbcType="BIGINT" property="companyId" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="num" jdbcType="VARCHAR" property="num" />
		<result column="model" jdbcType="VARCHAR" property="model" />
		<result column="unit" jdbcType="VARCHAR" property="unit" />
		<result column="amount" jdbcType="DECIMAL" property="amount" />
		<result column="amount_freeze" jdbcType="DECIMAL" property="amountFreeze" />
		<result column="cst_create" jdbcType="TIMESTAMP" property="cstCreate" />
		<result column="cst_modified" jdbcType="TIMESTAMP" property="cstModified" />
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.math.BigInteger">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		delete from material_headquarters
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="top.warmheart.workerunion.server.model.MaterialHeadquarters">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.math.BigInteger">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into material_headquarters (company_id, name, num,
		model, unit, amount,
		amount_freeze, cst_create, cst_modified
		)
		values (#{companyId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{num,jdbcType=VARCHAR},
		#{model,jdbcType=VARCHAR}, #{unit,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL},
		#{amountFreeze,jdbcType=DECIMAL}, #{cstCreate,jdbcType=TIMESTAMP}, #{cstModified,jdbcType=TIMESTAMP}
		)
	</insert>
	<update id="updateByPrimaryKey" parameterType="top.warmheart.workerunion.server.model.MaterialHeadquarters">
		update material_headquarters
		set company_id = #{companyId,jdbcType=BIGINT},
		name = #{name,jdbcType=VARCHAR},
		num = #{num,jdbcType=VARCHAR},
		model = #{model,jdbcType=VARCHAR},
		unit = #{unit,jdbcType=VARCHAR},
		amount = #{amount,jdbcType=DECIMAL},
		amount_freeze = #{amountFreeze,jdbcType=DECIMAL},
		cst_modified = now()
		where id = #{id,jdbcType=BIGINT}
	</update>
	<select id="selectByPrimaryKey" parameterType="java.math.BigInteger" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		select id, company_id, name, num, model, unit, amount, amount_freeze, cst_create,
		cst_modified
		from material_headquarters
		where id = #{id,jdbcType=BIGINT}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		select id, company_id, name, num, model, unit, amount, amount_freeze, cst_create,
		cst_modified
		from material_headquarters
	</select>
	<insert id="insertOrAccumulate" parameterType="top.warmheart.workerunion.server.model.MaterialHeadquarters">
		<selectKey keyProperty="id" order="AFTER" resultType="java.math.BigInteger">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into material_headquarters (company_id, name,
		num, model, unit, amount,
		amount_freeze, cst_create, cst_modified
		)
		values (#{companyId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR},
		#{num,jdbcType=VARCHAR},
		#{model,jdbcType=VARCHAR},
		#{unit,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL},
		#{amountFreeze,jdbcType=DECIMAL},
		now(), now()
		) on duplicate key
		update amount=amount+#{amount,jdbcType=DECIMAL}, cst_modified=now()
	</insert>
	<select id="selectByNum" resultMap="BaseResultMap">
		select id, company_id, name, num, model, unit, amount,
		amount_freeze,
		cst_create, cst_modified
		from material_headquarters where company_id=#{companyId,jdbcType=BIGINT} and num=#{num,
		jdbcType=VARCHAR}
	</select>
	<select id="selectByNum4Update" resultMap="BaseResultMap">
		select id, company_id, name, num, model, unit, amount,
		amount_freeze,
		cst_create, cst_modified
		from material_headquarters where company_id=#{companyId,jdbcType=BIGINT} and num=#{num,
		jdbcType=VARCHAR} for update
	</select>
	<select id="countByFuzzy" resultType="java.lang.Integer">
		select count(distinct id)
		from material_headquarters where company_id=#{companyId,jdbcType=BIGINT}
		<if test="num != null and num != ''">
			and num like CONCAT('%',#{num},'%')
		</if>
		<if test="name != null and name != ''">
			and name like CONCAT('%',#{name},'%')
		</if>
	</select>
	<select id="pageByFuzzy" resultMap="BaseResultMap">
		select m.id, m.company_id, m.name, m.num, m.model, m.unit, m.amount, m.amount_freeze,
		m.cst_create,
		m.cst_modified
		from material_headquarters m,(select distinct id from material_headquarters where company_id=#{companyId,jdbcType=BIGINT}
		<if test="num != null and num != ''">
			and num like CONCAT('%',#{num,jdbcType=VARCHAR},'%')
		</if>
		<if test="name != null and name != ''">
			and name like CONCAT('%',#{name,jdbcType=VARCHAR},'%')
		</if>
		order by num asc limit #{page.frontIndex},#{page.size})temp
		where m.id=temp.id order by m.num asc
	</select>
	
</mapper>
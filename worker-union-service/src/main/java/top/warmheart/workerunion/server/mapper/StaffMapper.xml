<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.warmheart.workerunion.server.dao.StaffMapper">
	<resultMap id="BaseResultMap" type="top.warmheart.workerunion.server.model.Staff">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="company_id" jdbcType="BIGINT" property="companyId" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="sex" jdbcType="VARCHAR" property="sex" />
		<result column="job_no" jdbcType="VARCHAR" property="jobNo" />
		<result column="native_place" jdbcType="VARCHAR" property="nativePlace" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="id_card_no" jdbcType="VARCHAR" property="idCardNo" />
		<result column="address" jdbcType="VARCHAR" property="address" />
		<result column="entry_date" jdbcType="DATE" property="entryDate" />
		<result column="career" jdbcType="VARCHAR" property="career" />
		<result column="birthday" jdbcType="DATE" property="birthday" />
		<result column="salt" jdbcType="VARCHAR" property="salt" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="cst_create" jdbcType="TIMESTAMP" property="cstCreate" />
		<result column="cst_modified" jdbcType="TIMESTAMP" property="cstModified" />
		<result column="memo" jdbcType="VARCHAR" property="memo" />
		<result column="is_del" jdbcType="BIT" property="del" />
	</resultMap>

	<resultMap id="StaffDtoMap" type="top.warmheart.workerunion.server.dto.StaffDto">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="company_id" jdbcType="BIGINT" property="companyId" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="sex" jdbcType="VARCHAR" property="sex" />
		<result column="job_no" jdbcType="VARCHAR" property="jobNo" />
		<result column="native_place" jdbcType="VARCHAR" property="nativePlace" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="id_card_no" jdbcType="VARCHAR" property="idCardNo" />
		<result column="address" jdbcType="VARCHAR" property="address" />
		<result column="entry_date" jdbcType="DATE" property="entryDate" />
		<result column="career" jdbcType="VARCHAR" property="career" />
		<result column="birthday" jdbcType="DATE" property="birthday" />
		<result column="cst_create" jdbcType="TIMESTAMP" property="cstCreate" />
		<result column="cst_modified" jdbcType="TIMESTAMP" property="cstModified" />
		<result column="memo" jdbcType="VARCHAR" property="memo" />
		<result column="is_del" jdbcType="BIT" property="del" />
		<result column="role_name" jdbcType="VARCHAR" property="roleName" />
		<result column="project_name" jdbcType="VARCHAR" property="projectName" />
		<result column="start_date" jdbcType="TIMESTAMP" property="startDate" />
		<result column="end_date" jdbcType="TIMESTAMP" property="endDate" />
	</resultMap>

	<delete id="deleteByPrimaryKey" parameterType="java.math.BigInteger">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		delete from staff
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<insert id="insert" parameterType="top.warmheart.workerunion.server.model.Staff">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.math.BigInteger">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into staff (company_id, name, sex,
		job_no, native_place, phone,
		id_card_no, address, entry_date,
		career, birthday, salt,
		password, cst_create, cst_modified,
		memo, is_del)
		values (#{companyId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR},
		#{jobNo,jdbcType=VARCHAR}, #{nativePlace,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR},
		#{idCardNo,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{entryDate,jdbcType=DATE},
		#{career,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE}, #{salt,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR}, now(), now(),
		#{memo,jdbcType=VARCHAR}, false)
	</insert>
	<update id="updateByPrimaryKey" parameterType="top.warmheart.workerunion.server.model.Staff">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		update staff
		set company_id = #{companyId,jdbcType=BIGINT},
		name = #{name,jdbcType=VARCHAR},
		sex = #{sex,jdbcType=VARCHAR},
		job_no = #{jobNo,jdbcType=VARCHAR},
		native_place = #{nativePlace,jdbcType=VARCHAR},
		phone = #{phone,jdbcType=VARCHAR},
		id_card_no = #{idCardNo,jdbcType=VARCHAR},
		address = #{address,jdbcType=VARCHAR},
		entry_date = #{entryDate,jdbcType=DATE},
		career = #{career,jdbcType=VARCHAR},
		birthday = #{birthday,jdbcType=DATE},
		salt = #{salt,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		cst_modified = now(),
		memo = #{memo,jdbcType=VARCHAR}
		where id = #{id,jdbcType=BIGINT}
	</update>
	<select id="selectByPrimaryKey" parameterType="java.math.BigInteger" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		select id, company_id, name, sex, job_no, native_place, phone, id_card_no, address,
		entry_date, career, birthday, salt, password, cst_create, cst_modified, memo, is_del
		from staff
		where id = #{id,jdbcType=BIGINT}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated This element is automatically generated by MyBatis Generator, do not modify. -->
		select id, company_id, name, sex, job_no, native_place, phone, id_card_no, address,
		entry_date, career, birthday, salt, password, cst_create, cst_modified, memo, is_del
		from staff
	</select>

	<!-- 通过工号获取员工信息 -->
	<select id="selectByJobNo" resultMap="BaseResultMap">
		select id, company_id, name, sex, job_no, native_place, phone, id_card_no,
		address,
		entry_date, career, birthday, salt, password, cst_create, cst_modified, memo, is_del
		from staff
		where job_no=#{jobNo,jdbcType=VARCHAR} and company_id=#{companyId,jdbcType=BIGINT}
	</select>

	<!-- 根据ID删除员工信息 -->
	<update id="deleteById">
		update staff set is_del=true , cst_modified = now() where id=#{id,jdbcType=BIGINT} and is_del=false
	</update>

	<!-- 根据ID获取员工详细信息 -->
	<select id="selectDetailById" resultMap="StaffDtoMap">
		select s.id, s.company_id, s.name, s.sex, s.job_no, s.native_place,
		s.phone, s.id_card_no, s.address,
		s.entry_date, s.career, s.birthday, s.cst_create, s.cst_modified, s.memo, s.is_del, ifnull(group_concat(distinct r.name),"") role_name,
		ifnull(group_concat(distinct concat("(",p.num,")",p.name)),"") project_name from staff s
		left join staff_has_role sr on sr.staff_id=s.id left join
		role r on r.id=sr.role_id
		left join project_application pa on pa.staff_id=s.id left join project p on
		p.id=pa.project_id and p.collapse_status=#{collapseStatusGoing,jdbcType=VARCHAR}
		where s.id=#{id,jdbcType=BIGINT} and s.is_del=false group by s.id
	</select>

	<!-- 获取符合模糊搜索的员工信息个数 -->
	<select id="countByFuzzy" resultType="java.lang.Integer">
		select count(distinct s.id) from staff s
		<if test="staffDto.roleName != null and staffDto.roleName != ''">
			join staff_has_role sr on sr.staff_id=s.id join role r on r.id=sr.role_id and r.name like
			CONCAT('%',#{staffDto.roleName},'%')
		</if>
		<if test="staffDto.projectName != null and staffDto.projectName != ''">
			join project_application pa on pa.staff_id=s.id join project p on p.id=pa.project_id and p.collapse_status=#{collapseStatusGoing,jdbcType=VARCHAR} and
			p.name like
			CONCAT('%',#{staffDto.projectName},'%')
		</if>
		where s.company_id=#{staffDto.companyId} and s.is_del=false
		<if test="staffDto.name != null and staffDto.name != ''">
			and s.name like CONCAT('%',#{staffDto.name},'%')
		</if>
		<if test="staffDto.jobNo != null and staffDto.jobNo != ''">
			and s.job_no like CONCAT('%',#{staffDto.jobNo},'%')
		</if>
		<if test="staffDto.idCardNo != null and staffDto.idCardNo != ''">
			and s.id_card_no like CONCAT('%',#{staffDto.idCardNo},'%')
		</if>
		<if test="staffDto.startDate != null">
			and DATEDIFF(s.entry_date, #{staffDto.startDate}) &gt;= 0
		</if>
		<if test="staffDto.endDate != null">
			and DATEDIFF(s.entry_date, #{staffDto.endDate}) &lt;= 0
		</if>
		order by s.job_no asc
	</select>

	<!-- 获取符合模糊搜索的员工信息列表 -->
	<select id="pageByFuzzy" resultMap="StaffDtoMap">
		select s2.id, s2.company_id, s2.name, s2.sex, s2.job_no, s2.native_place, s2.phone, s2.id_card_no, s2.address,
		s2.entry_date, s2.career, s2.birthday, s2.cst_create, s2.cst_modified, s2.memo, s2.is_del,
		ifnull(group_concat(distinct r2.name),"") role_name, ifnull(group_concat(distinct concat("(",p2.num,")",p2.name)),"") project_name from
		(select distinct s.id from staff s
		<if test="staffDto.roleName != null and staffDto.roleName != ''">
			join staff_has_role sr on sr.staff_id=s.id join role r on r.id=sr.role_id and r.name like
			CONCAT('%',#{staffDto.roleName},'%')
		</if>
		<if test="staffDto.projectName != null and staffDto.projectName != ''">
			join project_application pa on pa.staff_id=s.id join project p on p.id=pa.project_id and p.collapse_status=#{collapseStatusGoing,jdbcType=VARCHAR} and
			p.name like
			CONCAT('%',#{staffDto.projectName},'%')
		</if>
		where s.company_id=#{staffDto.companyId} and s.is_del=false
		<if test="staffDto.name != null and staffDto.name != ''">
			and s.name like CONCAT('%',#{staffDto.name},'%')
		</if>
		<if test="staffDto.jobNo != null and staffDto.jobNo != ''">
			and s.job_no like CONCAT('%',#{staffDto.jobNo},'%')
		</if>
		<if test="staffDto.idCardNo != null and staffDto.idCardNo != ''">
			and s.id_card_no like CONCAT('%',#{staffDto.idCardNo},'%')
		</if>
		<if test="staffDto.startDate != null">
			and DATEDIFF(s.entry_date, #{staffDto.startDate}) &gt;= 0
		</if>
		<if test="staffDto.endDate != null">
			and DATEDIFF(s.entry_date, #{staffDto.endDate}) &lt;= 0
		</if>
		order by s.job_no asc limit #{page.frontIndex},#{page.size})temp, staff s2
		left join staff_has_role sr2 on
		sr2.staff_id=s2.id left join role r2 on r2.id=sr2.role_id
		left join project_application pa2 on pa2.staff_id=s2.id left
		join project p2 on p2.id=pa2.project_id and p2.collapse_status=#{collapseStatusGoing,jdbcType=VARCHAR}
		where s2.id=temp.id and s2.is_del=false group by s2.id order by s2.job_no asc
	</select>
</mapper>